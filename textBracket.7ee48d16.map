{"version":3,"sources":["assets\\js\\helper.js","assets\\js\\textBracket\\index.js"],"names":["create","document","createElement","tagname","div","span","nav","ul","li","strong","a","h3","p","img","button","setStyle","selector","styles","console","log","Object","entries","key","value","style","TextBracket","dataset","keywords","duration","words","split","current","createNode","bracket","cloneNode","before","after","wordWrap","word","className","display","justifyContent","textTransform","fontWeight","overflow","innerHTML","append","maxWidth","maxHeight","wordsSelector","map","_word","textWord","wordSlider","flexDirection","transition","offsetWidth","offsetHeight","width","height","position","top","left","update","transform","length","setTimeout","textBracket","querySelector"],"mappings":"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","file":"textBracket.7ee48d16.map","sourceRoot":"..\\src","sourcesContent":["const create = tagname => document.createElement(tagname);\r\n\r\nconst div = create(\"div\");\r\nconst span = create(\"span\");\r\nconst nav = create(\"nav\");\r\nconst ul = create(\"ul\");\r\nconst li = create(\"li\");\r\nconst strong = create(\"strong\");\r\nconst a = create(\"a\");\r\nconst h3 = create(\"h3\");\r\nconst p = create(\"p\");\r\nconst img = create(\"img\");\r\nconst button = create(\"button\");\r\n\r\nconst setStyle = (selector, styles = {}) => {\r\n    console.log(styles);\r\n    for (let [key, value] of Object.entries(styles)) {\r\n      selector.style[key] = value;\r\n    }\r\n  };\r\n\r\nexport {\r\n    div,\r\n    span,\r\n    nav,\r\n    ul,\r\n    li,\r\n    strong,\r\n    a,\r\n    h3,\r\n    p,\r\n    img,\r\n    button,\r\n    setStyle\r\n}","import {\r\n    div,\r\n    span,\r\n    nav,\r\n    ul,\r\n    li,\r\n    strong,\r\n    a,\r\n    h3,\r\n    p,\r\n    img,\r\n    button,\r\n    setStyle\r\n} from '../helper'\r\nconst TextBracket = class {\r\n    constructor({\r\n        selector\r\n    }) {\r\n        if (!selector) return;\r\n        this.selector = selector;\r\n        const {\r\n            keywords = [], duration = 4000\r\n        } = this.selector.dataset;\r\n        this.duration = duration;\r\n        this.words = keywords.split(\",\");\r\n\r\n        this.current = 0;\r\n        this.createNode();\r\n    }\r\n    createNode() {\r\n        const bracket = div.cloneNode();\r\n        const before = h3.cloneNode();\r\n        const after = h3.cloneNode();\r\n        const wordWrap = div.cloneNode();\r\n        this.wordWrap = wordWrap;\r\n        const word = h3.cloneNode();\r\n\r\n        before.className = 'color-primary bold mr-10'\r\n        after.className = 'color-primary bold ml-10'\r\n\r\n        setStyle(word, {\r\n            display: 'inline-flex',\r\n            justifyContent: 'center',\r\n            textTransform: 'uppercase',\r\n            fontWeight: '400',\r\n        })\r\n\r\n        setStyle(bracket, {\r\n            display: \"inline-flex\"\r\n        });\r\n\r\n        setStyle(wordWrap, {\r\n            display: \"flex\",\r\n            overflow: 'hidden',\r\n        });\r\n\r\n        before.innerHTML = \"[\";\r\n        after.innerHTML = \"]\";\r\n\r\n        bracket.append(before, wordWrap, after);\r\n\r\n        let maxWidth = 0;\r\n        let maxHeight = 0;\r\n        this.wordsSelector = this.words.map(textWord => {\r\n            const _word = word.cloneNode(true);\r\n            _word.innerHTML = textWord;\r\n            return _word;\r\n        });\r\n        const wordSlider = div.cloneNode()\r\n        setStyle(wordSlider, {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            transition: '0.4s'\r\n        })\r\n        wordSlider.append(...this.wordsSelector)\r\n        this.wordWrap.append(wordSlider);\r\n\r\n        this.selector.append(bracket);\r\n\r\n        this.maxWidth = `${wordSlider.offsetWidth}px`\r\n        this.maxHeight = this.wordsSelector[0].offsetHeight\r\n        setStyle(this.wordWrap, {\r\n            width: this.maxWidth,\r\n            height: `${this.maxHeight}px`,\r\n            position: \"relative\",\r\n        });\r\n        setStyle(wordSlider, {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n        })\r\n        this.wordSlider = wordSlider\r\n        this.update();\r\n    }\r\n    update() {\r\n        console.log(this.current, this.maxHeight)\r\n        setStyle(this.wordSlider, {\r\n            transform: `translateY(-${this.current * this.maxHeight}px)`\r\n        })\r\n        this.current =\r\n            this.current >= this.wordsSelector.length - 1 ? 0 : this.current + 1;\r\n\r\n        setTimeout(() => this.update(), this.duration);\r\n    }\r\n};\r\nconst textBracket = document.querySelector(\".text-bracket\");\r\nnew TextBracket({\r\n    selector: textBracket\r\n});"]}